#cloud-config
# vim: syntax=yaml

# Assure this file is a correct cloud init with
#   cloud-init schema -c thisfile.yml

# Yaml check this file with
#   yamllint  thisfile.yml

# For detailed info on modules:
# http://cloudinit.readthedocs.io/en/latest/topics/modules.html

# use keywork MY_HOSTNAME (will be replaced by my script)

hostname: my_hostname
manage_etc_hosts: true
# disable root ssh
disable_root: true
fqdn: my_hostname.my_domain
timezone: Europe/Rome
ssh_authorized_keys:
  - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIFa9Rib5xmP+bAd+JC5zM1EK5RsAtYk6cYX+h++UUdj3 dante-ed25519@laptop
chpasswd:
  expire: false

#  CUSTOM
#
# Add apt resources
apt:
  sources:
    docker:
      source: "deb [arch=amd64] https://download.docker.com/linux/ubuntu jammy stable"
      keyid: "9DC858229FC7DD38854AE2D88D81803C0EBFCD88"

# Upgrade the instance on first boot
package_upgrade: true
package_update: true
package_reboot_if_required: true

# Install the following packages
# (keep alphabetical order)
packages:
 - aptitude
 - apt-utils
 - bash-completion
 - btop
 - byobu
 - bzip2
 - ca-certificates
 - colordiff
 - cron
 - ctop
 - curl
 - dnsutils
 - docker-ce
 - figlet
 - git
 - htop
 - httpie
 - iftop
 - iotop
 - jq
 - lsb-release
 - mc
 - mlocate
 - ncdu
 - neofetch
 - net-tools
 - nmap
 - plocate
 - pwgen
 - qemu-guest-agent
 - rsync
 - screen
 - sysfsutils
 - tar
 - tree
 - unattended-upgrades
 - unzip
 - vim
 - wget
 - whois
 - zip

groups:
  - users

users:
  - default
  - name: dante
    gecos: Dante
    primary_group: users
    groups: admin, docker
    shell: /bin/bash
    sudo: ALL=(ALL) NOPASSWD:ALL
    lock_passwd: true
    ssh_authorized_keys:
      - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIFa9Rib5xmP+bAd+JC5zM1EK5RsAtYk6cYX+h++UUdj3 dante-ed25519@laptop

runcmd:
  - chgrp users /srv
  - chmod 02775 /srv
  - systemctl restart qemu-guest-agent
  - apt purge -y  popularity-contest
  - apt -y autoremove
  # remove Ubuntu trash
  - sed -i 's/^ENABLED=.*/ENABLED=0/' /etc/default/motd-news
  # remove snapd trash
  - snap remove lxd
  - snap remove core20
  - snap remove snapd
  - systemctl stop snapd.service
  - systemctl stop snapd.socket
  - systemctl stop snapd.seeded.service
  - systemctl disable snapd.service
  - systemctl disable snapd.socket
  - systemctl disable snapd.seeded.service
  - systemctl stop snapd.service
  - systemctl stop snapd.socket
  - systemctl stop snapd.seeded.service
  - rm -rf /var/cache/snapd/
  - apt autoremove --purge snapd -y
  - rm -rf ~/snap/
  # remove apport trash
  - systemctl stop apport
  - sed -i 's/^enabled=.*/enabled=0/' /etc/default/apport
  - systemctl disable apport.service
  - systemctl mask apport.service
  - rm -rf /etc/cron.daily/apport
  - rm -rf /var/crash/*
  # disable updatedb from scanning /var/lib/docker
  - sed -i 's/PRUNEPATHS="/&\/var\/lib\/docker /' /etc/updatedb.conf
  # to avoid perl errors on locale
  - locale-gen "en_US.UTF-8"
  - update-alternatives --set editor /usr/bin/vim.basic

# Write arbitrary files on filesystem
write_files:
  - content: |
      alias ll='ls -la'
      alias cd..='cd ..'
      alias vi=vim
      alias svi='sudo vi'
      alias vis='vim "+set si"'

      alias rm='rm -i'
      alias mv='mv -i'
      alias cp='cp -i'

      alias sha1='openssl sha1'
      alias grep='grep --color=auto'
      alias pwgen='pwgen --no-vowels --numerals --capitalize --ambiguous --secure'
      alias free='\free -mht'
      alias sudo='\sudo '
      alias dmesg='\dmesg --color=auto --reltime --human --nopager --decode'
    path: /etc/profile.d/bash-aliases.sh
    permissions: '0644'
  - content: |
      set modeline
      set tabstop=4
      set shiftwidth=4
      filetype plugin indent on
      filetype plugin on
      syntax on
      autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab fileencoding=utf-8
      autocmd FileType bash setlocal ts=2 sts=2 sw=2 expandtab fileencoding=utf-8
      autocmd FileType json setlocal ts=2 sts=2 sw=2 expandtab fileencoding=utf-8
      # remove trailing spaces
      autocmd BufWritePre * :%s/\s\+$//e
    path: /etc/vim/vimrc.local
  - content: |
      #!/bin/sh
      # periodically cleanup of images not used
      /usr/bin/docker system prune --force --all
    path: /etc/cron.daily/docker-cleanup
    permissions: '0755'

# Echo the following message when finished without errors
final_message: "===> cloud-init finished his job at $TIMESTAMP, after $UPTIME seconds"
